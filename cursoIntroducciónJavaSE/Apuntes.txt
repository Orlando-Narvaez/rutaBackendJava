Atajos:
	sout = System.out.println();

Operadores de asignación:
	+=: a += b es equivalente a a = a + b.
	-=: a -= b es equivalente a a = a - b.
	*=: a *= b es equivalente a a = a * b.
	/=: a /= b es equivalente a a = a / b.
	%=: a %= b es equivalente a a = a % b.

Operadores de incremento:
	++: i++ es equivalente a i = i + 1.
	--: i-- es equivalente a i = i - 1.


Comentarios
	• //Comentario en una línea

	• /*Comentario en multiples
  	  líneas */

	• /** */ Javadoc

EJEMPLO DE JavaDoc:
/**
 * Descripción general de nuestra función.
 * 
 * @param quantity Descripción del parámetro quanity.
 * @param currency Descripción del parámetro currency (MXN o COP).
 * @return Descripción del valor que devolvemos en esta función.
 * */


IntelliJ IDEA > Preferences > Editor > General > Code Complettion y habilitar la opción de Show the documentarion popup


Break:
	En Java esta sentencia la verás en dos situaciones especificamente:

En un Switch: en esta situación break hace que el flujo del switch no continúe ejecutándose a 
	la siguiente comparación, esto con el objetivo de que solo se cumpla una sola condición:

switch (colorModeSelected){
	case "Light":
                System.out.println("Seleccionaste Light Mode");
                break;
        case "Night": //Ambar
                System.out.println("Seleccionaste Night Mode");
                break;
        case "Blue Dark":
                System.out.println("Seleccionaste Blue Dark Mode");
                break;
}

Para salir de un bucle: Como acabamos de ver un break es capaz de detener el flujo en el código, 
	en este caso detendremos el ciclo como tal terminándolo y haciendo que saltemos a la siguiente 
	instrucción después del ciclo.


Continue:
	Continue en cierto modo también nos va a servir para detener un ciclo pero en lugar de 
	terminarlo como en el caso de break, este volverá directo a la condición.

Return:
	Aunque en algunos lenguajes esta sentencia sirve como un tipo goto, dónde se rompe el 
	flujo del programa la mejor forma de usarlo en Java es en Funciones, cuando lo usamos 
	aquí siempre viene acompañado de un valor, el cuál indica el dato que se estará 
	devolviendo en la función.

Los arreglos o arrays son objetos en los que podemos guardar más de una variable, 
una lista de elementos. Los arrays son de una sola dimensión, pero si guardamos arrays 
dentro de otros arrays podemos obtener arrays multidimensionales.

Los arrays se definen en código de las siguientes maneras:

// 1. Definir el nombre de la variable y el tipo de datos
//  que va a contener, cualquiera de las siguientes dos
// opciones es válida:
TipoDato[] nombreVariable;
TipoDato nombreVariable[];

// 2. Definir el tamaño del array, la cantidad de elementos
// que podemos guardar en el array:
TipoDato[] nombreVariable = new TipoDato[capacidad];

// Array de dos dimensiones:
TipoDato[][] cities = new String[númeroFilas][númeroColumnas];

